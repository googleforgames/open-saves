// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: open_saves.proto

package opensaves

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FilterOperator has a list of comperators.
type FilterOperator int32

const (
	// =
	FilterOperator_EQUAL FilterOperator = 0
	// >
	FilterOperator_GREATER FilterOperator = 1
	// <
	FilterOperator_LESS FilterOperator = 2
	// >=
	FilterOperator_GREATER_OR_EQUAL FilterOperator = 3
	// <=
	FilterOperator_LESS_OR_EQUAL FilterOperator = 4
)

// Enum value maps for FilterOperator.
var (
	FilterOperator_name = map[int32]string{
		0: "EQUAL",
		1: "GREATER",
		2: "LESS",
		3: "GREATER_OR_EQUAL",
		4: "LESS_OR_EQUAL",
	}
	FilterOperator_value = map[string]int32{
		"EQUAL":            0,
		"GREATER":          1,
		"LESS":             2,
		"GREATER_OR_EQUAL": 3,
		"LESS_OR_EQUAL":    4,
	}
)

func (x FilterOperator) Enum() *FilterOperator {
	p := new(FilterOperator)
	*p = x
	return p
}

func (x FilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_open_saves_proto_enumTypes[0].Descriptor()
}

func (FilterOperator) Type() protoreflect.EnumType {
	return &file_open_saves_proto_enumTypes[0]
}

func (x FilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperator.Descriptor instead.
func (FilterOperator) EnumDescriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{0}
}

// Supported structured data types
type Property_Type int32

const (
	Property_DATATYPE_UNDEFINED Property_Type = 0
	Property_INTEGER            Property_Type = 1
	Property_STRING             Property_Type = 2
	Property_BOOLEAN            Property_Type = 3
)

// Enum value maps for Property_Type.
var (
	Property_Type_name = map[int32]string{
		0: "DATATYPE_UNDEFINED",
		1: "INTEGER",
		2: "STRING",
		3: "BOOLEAN",
	}
	Property_Type_value = map[string]int32{
		"DATATYPE_UNDEFINED": 0,
		"INTEGER":            1,
		"STRING":             2,
		"BOOLEAN":            3,
	}
)

func (x Property_Type) Enum() *Property_Type {
	p := new(Property_Type)
	*p = x
	return p
}

func (x Property_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_open_saves_proto_enumTypes[1].Descriptor()
}

func (Property_Type) Type() protoreflect.EnumType {
	return &file_open_saves_proto_enumTypes[1]
}

func (x Property_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_Type.Descriptor instead.
func (Property_Type) EnumDescriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{0, 0}
}

// Direction is the ways to sort a list of records returned by querying.
type SortOrder_Direction int32

const (
	// Sort by ascending order.
	SortOrder_ASC SortOrder_Direction = 0
	// Sort by descending order.
	SortOrder_DESC SortOrder_Direction = 1
)

// Enum value maps for SortOrder_Direction.
var (
	SortOrder_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortOrder_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortOrder_Direction) Enum() *SortOrder_Direction {
	p := new(SortOrder_Direction)
	*p = x
	return p
}

func (x SortOrder_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_open_saves_proto_enumTypes[2].Descriptor()
}

func (SortOrder_Direction) Type() protoreflect.EnumType {
	return &file_open_saves_proto_enumTypes[2]
}

func (x SortOrder_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder_Direction.Descriptor instead.
func (SortOrder_Direction) EnumDescriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{13, 0}
}

// Property to sort by, which can either be system defined properties
// or a user property.
type SortOrder_Property int32

const (
	SortOrder_UPDATED_AT    SortOrder_Property = 0
	SortOrder_CREATED_AT    SortOrder_Property = 1
	SortOrder_USER_PROPERTY SortOrder_Property = 2
)

// Enum value maps for SortOrder_Property.
var (
	SortOrder_Property_name = map[int32]string{
		0: "UPDATED_AT",
		1: "CREATED_AT",
		2: "USER_PROPERTY",
	}
	SortOrder_Property_value = map[string]int32{
		"UPDATED_AT":    0,
		"CREATED_AT":    1,
		"USER_PROPERTY": 2,
	}
)

func (x SortOrder_Property) Enum() *SortOrder_Property {
	p := new(SortOrder_Property)
	*p = x
	return p
}

func (x SortOrder_Property) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder_Property) Descriptor() protoreflect.EnumDescriptor {
	return file_open_saves_proto_enumTypes[3].Descriptor()
}

func (SortOrder_Property) Type() protoreflect.EnumType {
	return &file_open_saves_proto_enumTypes[3]
}

func (x SortOrder_Property) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder_Property.Descriptor instead.
func (SortOrder_Property) EnumDescriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{13, 1}
}

// Property represents typed data in Open Saves.
// This is limited to one type per key.
type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Property_Type `protobuf:"varint,1,opt,name=type,proto3,enum=opensaves.Property_Type" json:"type,omitempty"`
	// Types that are assignable to Value:
	//	*Property_IntegerValue
	//	*Property_StringValue
	//	*Property_BooleanValue
	Value isProperty_Value `protobuf_oneof:"value"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{0}
}

func (x *Property) GetType() Property_Type {
	if x != nil {
		return x.Type
	}
	return Property_DATATYPE_UNDEFINED
}

func (m *Property) GetValue() isProperty_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Property) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*Property_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *Property) GetStringValue() string {
	if x, ok := x.GetValue().(*Property_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Property) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Property_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

type isProperty_Value interface {
	isProperty_Value()
}

type Property_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type Property_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Property_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,4,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*Property_IntegerValue) isProperty_Value() {}

func (*Property_StringValue) isProperty_Value() {}

func (*Property_BooleanValue) isProperty_Value() {}

// Record represents each entity in the Open Saves database.
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the user defined primary key.
	// It is recommended to use uniformally distributed key (e.g. UUID) rather
	// than monotonically increasing values for performance reasons. See
	// https://cloud.google.com/datastore/docs/best-practices#keys for details.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Byte length of the blob (read-only)
	BlobSize int64 `protobuf:"varint,3,opt,name=blob_size,json=blobSize,proto3" json:"blob_size,omitempty"`
	// Typed values that are indexed and searchable.
	// The number of properties allowed in a record is backend dependent.
	Properties map[string]*Property `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// owner_id is the owner of the record, represented as an external user ID.
	// Open Saves doesn't maintain list of valid users and it is the
	// responsibility of the client to keep track of user IDs.
	OwnerId string `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// tags are queryable strings to categorize records
	// Examples: "player:1", "system", "inventory:xxx"
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// created_at is the point in time in UTC when the Record is created
	// on the Open Saves server. It is managed and set by the server.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is the point in time in UTC when the Record is updated
	// on the Open Saves server. It is managed by the server and updated every
	// time the Record is updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// chunked is set true if the attached blob is chunked, otherwise false.
	Chunked bool `protobuf:"varint,9,opt,name=chunked,proto3" json:"chunked,omitempty"`
	// The number of chunks in the associated chunked blob.
	ChunkCount int64 `protobuf:"varint,10,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`
	// Opaque string where you can store any utf-8 string (e.g. JSON) that is too
	// big and does not fit in the properties. This will not be indexed or
	// queryable. The current size limit is 32KiB.
	OpaqueString string `protobuf:"bytes,11,opt,name=opaque_string,json=opaqueString,proto3" json:"opaque_string,omitempty"`
	// Signature is a server-generated unique UUID that is updated each time
	// the server updates the record. The server returns the current signature
	// for read requests. The client may optionally populate this field and send
	// update requests, and the server will check the value against the latest value
	// and abort the request if they don't match.
	Signature []byte `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{1}
}

func (x *Record) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Record) GetBlobSize() int64 {
	if x != nil {
		return x.BlobSize
	}
	return 0
}

func (x *Record) GetProperties() map[string]*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Record) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Record) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Record) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Record) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Record) GetChunked() bool {
	if x != nil {
		return x.Chunked
	}
	return false
}

func (x *Record) GetChunkCount() int64 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *Record) GetOpaqueString() string {
	if x != nil {
		return x.OpaqueString
	}
	return ""
}

func (x *Record) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Performance optimization hints for the server.
// The server may silently ignore the hints when not feasible.
type Hint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, do not cache the record for future requests.
	DoNotCache bool `protobuf:"varint,1,opt,name=do_not_cache,json=doNotCache,proto3" json:"do_not_cache,omitempty"`
	// If true, skip the cache check and always check the metadata server.
	// If false, allow file size to determine cache checks.
	SkipCache bool `protobuf:"varint,2,opt,name=skip_cache,json=skipCache,proto3" json:"skip_cache,omitempty"`
	// If true, always store the blob in blob storage, rather than in the metadata
	// server. If false, allow file size to determine where to store the blob.
	ForceBlobStore bool `protobuf:"varint,3,opt,name=force_blob_store,json=forceBlobStore,proto3" json:"force_blob_store,omitempty"`
	// Tells the server to not use blob storage. Always store the blob into
	// the metadata entity. The server will return an error if the blob is too
	// large. The exact size limit depends on the backend implementation.
	ForceInlineBlob bool `protobuf:"varint,4,opt,name=force_inline_blob,json=forceInlineBlob,proto3" json:"force_inline_blob,omitempty"`
}

func (x *Hint) Reset() {
	*x = Hint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hint) ProtoMessage() {}

func (x *Hint) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hint.ProtoReflect.Descriptor instead.
func (*Hint) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{2}
}

func (x *Hint) GetDoNotCache() bool {
	if x != nil {
		return x.DoNotCache
	}
	return false
}

func (x *Hint) GetSkipCache() bool {
	if x != nil {
		return x.SkipCache
	}
	return false
}

func (x *Hint) GetForceBlobStore() bool {
	if x != nil {
		return x.ForceBlobStore
	}
	return false
}

func (x *Hint) GetForceInlineBlob() bool {
	if x != nil {
		return x.ForceInlineBlob
	}
	return false
}

// Store represents an internal bucket to contain records.
type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the user defined primary key.
	// It is recommended to use uniformally distributed key (e.g. UUID) rather
	// than monotonically increasing values for performance reasons. See
	// https://cloud.google.com/datastore/docs/best-practices#keys for details.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// name is a user defined name of the store.
	// It is indexed and queriable with ListStore, but is otherwise opaque to the
	// server.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// tags are queryable strings to categorize stores
	// Examples: "player:1", "system", "inventory:xxx"
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// owner_id is the owner of the store, represented as an external user ID.
	// Open Saves doesn't maintain list of valid users and it is the
	// responsibility of the client to keep track of user IDs.
	OwnerId string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// created_at is the point in time in UTC when the Store is created
	// on the Open Saves server. It is managed and set by the server.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is the point in time in UTC when the Store is updated
	// on the Open Saves server. It is managed by the server and updated every
	// time the Store is updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{3}
}

func (x *Store) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Store) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Store) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Store) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Store) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store to create.
	Store *Store `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *CreateStoreRequest) Reset() {
	*x = CreateStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStoreRequest) ProtoMessage() {}

func (x *CreateStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStoreRequest.ProtoReflect.Descriptor instead.
func (*CreateStoreRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{4}
}

func (x *CreateStoreRequest) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type GetStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store to retrieve.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetStoreRequest) Reset() {
	*x = GetStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreRequest) ProtoMessage() {}

func (x *GetStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreRequest.ProtoReflect.Descriptor instead.
func (*GetStoreRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{5}
}

func (x *GetStoreRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// ListStoresRequest contains conditions to filter stores.
// Multiple conditions are AND'ed together.
type ListStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store name. This is an exact match.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of tags
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// owner_id is the owner of stores, represented as an external user ID.
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *ListStoresRequest) Reset() {
	*x = ListStoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoresRequest) ProtoMessage() {}

func (x *ListStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoresRequest.ProtoReflect.Descriptor instead.
func (*ListStoresRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{6}
}

func (x *ListStoresRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListStoresRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListStoresRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type ListStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of stores that match the provided criteria.
	Stores []*Store `protobuf:"bytes,1,rep,name=stores,proto3" json:"stores,omitempty"`
}

func (x *ListStoresResponse) Reset() {
	*x = ListStoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoresResponse) ProtoMessage() {}

func (x *ListStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoresResponse.ProtoReflect.Descriptor instead.
func (*ListStoresResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{7}
}

func (x *ListStoresResponse) GetStores() []*Store {
	if x != nil {
		return x.Stores
	}
	return nil
}

type DeleteStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store to delete.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteStoreRequest) Reset() {
	*x = DeleteStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStoreRequest) ProtoMessage() {}

func (x *DeleteStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteStoreRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteStoreRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CreateRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store to create the record into.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The record to create.
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *CreateRecordRequest) Reset() {
	*x = CreateRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordRequest) ProtoMessage() {}

func (x *CreateRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateRecordRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRecordRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *CreateRecordRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *CreateRecordRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record to get.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{10}
}

func (x *GetRecordRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *GetRecordRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetRecordRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

// QueryRecordsRequest contains conditions to search particular records.
// Multiple conditions are AND'ed together.
type QueryRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// store_key is the primary key of the store.
	// Optional and the method queries all stores when omitted.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// List of filters
	Filters []*QueryFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// List of tags
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// owner_id is the owner of records, represented as an external user ID.
	OwnerId string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// List of sort orders to return records. These SortOrders are applied
	// in sequence.
	SortOrders []*SortOrder `protobuf:"bytes,5,rep,name=sort_orders,json=sortOrders,proto3" json:"sort_orders,omitempty"`
	// the limit of the number of records to return.
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryRecordsRequest) Reset() {
	*x = QueryRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecordsRequest) ProtoMessage() {}

func (x *QueryRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecordsRequest.ProtoReflect.Descriptor instead.
func (*QueryRecordsRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{11}
}

func (x *QueryRecordsRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *QueryRecordsRequest) GetFilters() []*QueryFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryRecordsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueryRecordsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *QueryRecordsRequest) GetSortOrders() []*SortOrder {
	if x != nil {
		return x.SortOrders
	}
	return nil
}

func (x *QueryRecordsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// QueryFilter is a filtering condition when querying records.
type QueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Propety name of the filter.
	PropertyName string `protobuf:"bytes,1,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	// Operator of the filter.
	Operator FilterOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=opensaves.FilterOperator" json:"operator,omitempty"`
	// Value to compare the property with.
	Value *Property `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QueryFilter) Reset() {
	*x = QueryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilter) ProtoMessage() {}

func (x *QueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFilter.ProtoReflect.Descriptor instead.
func (*QueryFilter) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{12}
}

func (x *QueryFilter) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *QueryFilter) GetOperator() FilterOperator {
	if x != nil {
		return x.Operator
	}
	return FilterOperator_EQUAL
}

func (x *QueryFilter) GetValue() *Property {
	if x != nil {
		return x.Value
	}
	return nil
}

// SortOrder is a way to order records returned by QueryRecords.
type SortOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Direction to sort by (either ascending or descending).
	Direction SortOrder_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=opensaves.SortOrder_Direction" json:"direction,omitempty"`
	// Property to sort by. If using a user defined property, user_property_name
	// must be passed in as well.
	Property SortOrder_Property `protobuf:"varint,3,opt,name=property,proto3,enum=opensaves.SortOrder_Property" json:"property,omitempty"`
	// The name of the user defined property.
	UserPropertyName string `protobuf:"bytes,4,opt,name=user_property_name,json=userPropertyName,proto3" json:"user_property_name,omitempty"`
}

func (x *SortOrder) Reset() {
	*x = SortOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOrder) ProtoMessage() {}

func (x *SortOrder) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOrder.ProtoReflect.Descriptor instead.
func (*SortOrder) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{13}
}

func (x *SortOrder) GetDirection() SortOrder_Direction {
	if x != nil {
		return x.Direction
	}
	return SortOrder_ASC
}

func (x *SortOrder) GetProperty() SortOrder_Property {
	if x != nil {
		return x.Property
	}
	return SortOrder_UPDATED_AT
}

func (x *SortOrder) GetUserPropertyName() string {
	if x != nil {
		return x.UserPropertyName
	}
	return ""
}

type QueryRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of records that match the criteria.
	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// List of store keys that each of the records belongs to.
	// The order of keys is the same as the records field,
	// e.g. store_keys[0] is the store for records[0], and so on.
	StoreKeys []string `protobuf:"bytes,2,rep,name=store_keys,json=storeKeys,proto3" json:"store_keys,omitempty"`
	// Performance hints.
	// Query caching is not supported at the moment
	Hint *Hint `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *QueryRecordsResponse) Reset() {
	*x = QueryRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecordsResponse) ProtoMessage() {}

func (x *QueryRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecordsResponse.ProtoReflect.Descriptor instead.
func (*QueryRecordsResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{14}
}

func (x *QueryRecordsResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *QueryRecordsResponse) GetStoreKeys() []string {
	if x != nil {
		return x.StoreKeys
	}
	return nil
}

func (x *QueryRecordsResponse) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type UpdateRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The content to update the record with.
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *UpdateRecordRequest) Reset() {
	*x = UpdateRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordRequest) ProtoMessage() {}

func (x *UpdateRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecordRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateRecordRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *UpdateRecordRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *UpdateRecordRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type DeleteRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record to delete.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteRecordRequest) Reset() {
	*x = DeleteRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordRequest) ProtoMessage() {}

func (x *DeleteRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRecordRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *DeleteRecordRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// CreateBlobRequest is used for CreateBlob, a client-streaming method.
// The first message should contain metadata, and the subsequent messages
// should contain content.
type CreateBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*CreateBlobRequest_Metadata
	//	*CreateBlobRequest_Content
	Request isCreateBlobRequest_Request `protobuf_oneof:"request"`
}

func (x *CreateBlobRequest) Reset() {
	*x = CreateBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlobRequest) ProtoMessage() {}

func (x *CreateBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlobRequest.ProtoReflect.Descriptor instead.
func (*CreateBlobRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{17}
}

func (m *CreateBlobRequest) GetRequest() isCreateBlobRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *CreateBlobRequest) GetMetadata() *BlobMetadata {
	if x, ok := x.GetRequest().(*CreateBlobRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *CreateBlobRequest) GetContent() []byte {
	if x, ok := x.GetRequest().(*CreateBlobRequest_Content); ok {
		return x.Content
	}
	return nil
}

type isCreateBlobRequest_Request interface {
	isCreateBlobRequest_Request()
}

type CreateBlobRequest_Metadata struct {
	// metadata is the metadata used to initialize the blob object with.
	Metadata *BlobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type CreateBlobRequest_Content struct {
	// content is the binary content of the blob object.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*CreateBlobRequest_Metadata) isCreateBlobRequest_Request() {}

func (*CreateBlobRequest_Content) isCreateBlobRequest_Request() {}

// BlobMetadata contains necessary metadata
// when creating (uploading) a new blob object.
type BlobMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// store_key is the key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// record_key is the key of the record the new blob object belongs to.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// size is the byte length of the object.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Performance hints (write only).
	Hint *Hint `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	// md5 is the MD5 hash of the blob content.
	// If supplied for uploads, the server validates the content using the hash value.
	// For downloads, the server returns the stored hash value of the blob content.
	// The length of the hash value is 0 (not present) or 16 (present) bytes.
	Md5 []byte `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	// crc32c is the CRC32C checksum of the blob content.
	// Specifically, it uses the Castagnoli polynomial. https://pkg.go.dev/hash/crc32#pkg-constants
	// If supplied for uploads, the server validates the content using the checksum.
	// For downloads, the server returns the checksum of the blob content.
	// Open Saves provides both MD5 and CRC32C because CRC32C is often used by
	// Cloud object storage services.
	Crc32C uint32 `protobuf:"varint,6,opt,name=crc32c,proto3" json:"crc32c,omitempty"`
	// has_crc32c indicates if crc32c is present.
	HasCrc32C bool `protobuf:"varint,7,opt,name=has_crc32c,json=hasCrc32c,proto3" json:"has_crc32c,omitempty"`
	// chunked is set true if the attached blob is chunked, otherwise false (read only).
	Chunked bool `protobuf:"varint,8,opt,name=chunked,proto3" json:"chunked,omitempty"`
	// Number of chunks (read only).
	ChunkCount int64 `protobuf:"varint,9,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`
}

func (x *BlobMetadata) Reset() {
	*x = BlobMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobMetadata) ProtoMessage() {}

func (x *BlobMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobMetadata.ProtoReflect.Descriptor instead.
func (*BlobMetadata) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{18}
}

func (x *BlobMetadata) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *BlobMetadata) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *BlobMetadata) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlobMetadata) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

func (x *BlobMetadata) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *BlobMetadata) GetCrc32C() uint32 {
	if x != nil {
		return x.Crc32C
	}
	return 0
}

func (x *BlobMetadata) GetHasCrc32C() bool {
	if x != nil {
		return x.HasCrc32C
	}
	return false
}

func (x *BlobMetadata) GetChunked() bool {
	if x != nil {
		return x.Chunked
	}
	return false
}

func (x *BlobMetadata) GetChunkCount() int64 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

type CreateChunkedBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// store_key is the key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// record_key is the key of the record the new blob object belongs to.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// Size of each chunk
	ChunkSize int64 `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// Expected number of chunks.
	// When set to non-zero, the server checks if it has received the exact number of
	// chunks when CommitChunkedUpload is called.
	ChunkCount int64 `protobuf:"varint,4,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`
}

func (x *CreateChunkedBlobRequest) Reset() {
	*x = CreateChunkedBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChunkedBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkedBlobRequest) ProtoMessage() {}

func (x *CreateChunkedBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkedBlobRequest.ProtoReflect.Descriptor instead.
func (*CreateChunkedBlobRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{19}
}

func (x *CreateChunkedBlobRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *CreateChunkedBlobRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *CreateChunkedBlobRequest) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *CreateChunkedBlobRequest) GetChunkCount() int64 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

type CreateChunkedBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is a chunked
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *CreateChunkedBlobResponse) Reset() {
	*x = CreateChunkedBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChunkedBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkedBlobResponse) ProtoMessage() {}

func (x *CreateChunkedBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkedBlobResponse.ProtoReflect.Descriptor instead.
func (*CreateChunkedBlobResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{20}
}

func (x *CreateChunkedBlobResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// UploadChunkRequest is used by UploadChunk, which is a client-streaming
// method. The first message should contain the metadata, and the subsequent
// messages should contain the content field until EOF.
type UploadChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*UploadChunkRequest_Metadata
	//	*UploadChunkRequest_Content
	Request isUploadChunkRequest_Request `protobuf_oneof:"request"`
}

func (x *UploadChunkRequest) Reset() {
	*x = UploadChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkRequest) ProtoMessage() {}

func (x *UploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkRequest.ProtoReflect.Descriptor instead.
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{21}
}

func (m *UploadChunkRequest) GetRequest() isUploadChunkRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *UploadChunkRequest) GetMetadata() *ChunkMetadata {
	if x, ok := x.GetRequest().(*UploadChunkRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *UploadChunkRequest) GetContent() []byte {
	if x, ok := x.GetRequest().(*UploadChunkRequest_Content); ok {
		return x.Content
	}
	return nil
}

type isUploadChunkRequest_Request interface {
	isUploadChunkRequest_Request()
}

type UploadChunkRequest_Metadata struct {
	// metadata is the metadata to associate the chunk to.
	Metadata *ChunkMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadChunkRequest_Content struct {
	// content is the binary content of the chunk.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*UploadChunkRequest_Metadata) isUploadChunkRequest_Request() {}

func (*UploadChunkRequest_Content) isUploadChunkRequest_Request() {}

type ChunkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is the ID of a chunk upload session. Not used for downloads.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// number is the number of the chunk.
	Number int64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// size is a byte size of the chunk.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Performance hints (write only).
	Hint *Hint `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	// md5 is the MD5 hash of the chunk content.
	// If supplied for uploads, the server validates the content using the hash value.
	// For downloads, the server returns the stored hash value of the chunk content.
	// The length of the hash value is 0 (not present) or 16 (present) bytes.
	Md5 []byte `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	// crc32c is the CRC32C checksum of the chunk content.
	// Specifically, it uses the Castagnoli polynomial. https://pkg.go.dev/hash/crc32#pkg-constants
	// If supplied for uploads, the server validates the content using the checksum.
	// For downloads, the server returns the checksum of the chunk content.
	// Open Saves provides both MD5 and CRC32C because CRC32C is often used by
	// Cloud object storage services.
	Crc32C uint32 `protobuf:"varint,6,opt,name=crc32c,proto3" json:"crc32c,omitempty"`
	// has_crc32c indicates if crc32c is present.
	HasCrc32C bool `protobuf:"varint,7,opt,name=has_crc32c,json=hasCrc32c,proto3" json:"has_crc32c,omitempty"`
}

func (x *ChunkMetadata) Reset() {
	*x = ChunkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMetadata) ProtoMessage() {}

func (x *ChunkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMetadata.ProtoReflect.Descriptor instead.
func (*ChunkMetadata) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{22}
}

func (x *ChunkMetadata) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChunkMetadata) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ChunkMetadata) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkMetadata) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

func (x *ChunkMetadata) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *ChunkMetadata) GetCrc32C() uint32 {
	if x != nil {
		return x.Crc32C
	}
	return 0
}

func (x *ChunkMetadata) GetHasCrc32C() bool {
	if x != nil {
		return x.HasCrc32C
	}
	return false
}

type CommitChunkedUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is the ID of a chunked upload session to commit.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *CommitChunkedUploadRequest) Reset() {
	*x = CommitChunkedUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitChunkedUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitChunkedUploadRequest) ProtoMessage() {}

func (x *CommitChunkedUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitChunkedUploadRequest.ProtoReflect.Descriptor instead.
func (*CommitChunkedUploadRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{23}
}

func (x *CommitChunkedUploadRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommitChunkedUploadRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type AbortChunkedUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is the ID of a chunked upload session to abort.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *AbortChunkedUploadRequest) Reset() {
	*x = AbortChunkedUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortChunkedUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortChunkedUploadRequest) ProtoMessage() {}

func (x *AbortChunkedUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortChunkedUploadRequest.ProtoReflect.Descriptor instead.
func (*AbortChunkedUploadRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{24}
}

func (x *AbortChunkedUploadRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record to get.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *GetBlobRequest) Reset() {
	*x = GetBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobRequest) ProtoMessage() {}

func (x *GetBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobRequest.ProtoReflect.Descriptor instead.
func (*GetBlobRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{25}
}

func (x *GetBlobRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *GetBlobRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *GetBlobRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

// GetBlobResponse is a server-streaming response to return metadata and
// content of a blob object. The first message contains metadata and the
// subsequent messages contain the rest of the binary blob in the content
// field.
type GetBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*GetBlobResponse_Metadata
	//	*GetBlobResponse_Content
	Response isGetBlobResponse_Response `protobuf_oneof:"response"`
}

func (x *GetBlobResponse) Reset() {
	*x = GetBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobResponse) ProtoMessage() {}

func (x *GetBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobResponse.ProtoReflect.Descriptor instead.
func (*GetBlobResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{26}
}

func (m *GetBlobResponse) GetResponse() isGetBlobResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetBlobResponse) GetMetadata() *BlobMetadata {
	if x, ok := x.GetResponse().(*GetBlobResponse_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *GetBlobResponse) GetContent() []byte {
	if x, ok := x.GetResponse().(*GetBlobResponse_Content); ok {
		return x.Content
	}
	return nil
}

type isGetBlobResponse_Response interface {
	isGetBlobResponse_Response()
}

type GetBlobResponse_Metadata struct {
	// metadata is the metadata used to initialize the blob object with.
	Metadata *BlobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type GetBlobResponse_Content struct {
	// content is the binary content of the blob object.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*GetBlobResponse_Metadata) isGetBlobResponse_Response() {}

func (*GetBlobResponse_Content) isGetBlobResponse_Response() {}

type GetBlobChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record to get.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// chunk_number is the number of the chunk to get.
	ChunkNumber int64 `protobuf:"varint,3,opt,name=chunk_number,json=chunkNumber,proto3" json:"chunk_number,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *GetBlobChunkRequest) Reset() {
	*x = GetBlobChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobChunkRequest) ProtoMessage() {}

func (x *GetBlobChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobChunkRequest.ProtoReflect.Descriptor instead.
func (*GetBlobChunkRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{27}
}

func (x *GetBlobChunkRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *GetBlobChunkRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *GetBlobChunkRequest) GetChunkNumber() int64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *GetBlobChunkRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

// GetBlobChunkResponse is a server-streaming response to return metadata and
// content of a chunked blob object. The first message contains metadata and the
// subsequent messages contain the binary data of the chunk inthe content field.
type GetBlobChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*GetBlobChunkResponse_Metadata
	//	*GetBlobChunkResponse_Content
	Response isGetBlobChunkResponse_Response `protobuf_oneof:"response"`
}

func (x *GetBlobChunkResponse) Reset() {
	*x = GetBlobChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobChunkResponse) ProtoMessage() {}

func (x *GetBlobChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobChunkResponse.ProtoReflect.Descriptor instead.
func (*GetBlobChunkResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{28}
}

func (m *GetBlobChunkResponse) GetResponse() isGetBlobChunkResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetBlobChunkResponse) GetMetadata() *ChunkMetadata {
	if x, ok := x.GetResponse().(*GetBlobChunkResponse_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *GetBlobChunkResponse) GetContent() []byte {
	if x, ok := x.GetResponse().(*GetBlobChunkResponse_Content); ok {
		return x.Content
	}
	return nil
}

type isGetBlobChunkResponse_Response interface {
	isGetBlobChunkResponse_Response()
}

type GetBlobChunkResponse_Metadata struct {
	Metadata *ChunkMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type GetBlobChunkResponse_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*GetBlobChunkResponse_Metadata) isGetBlobChunkResponse_Response() {}

func (*GetBlobChunkResponse_Content) isGetBlobChunkResponse_Response() {}

type DeleteBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record to delete a blob from.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *DeleteBlobRequest) Reset() {
	*x = DeleteBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlobRequest) ProtoMessage() {}

func (x *DeleteBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlobRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlobRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteBlobRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *DeleteBlobRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *DeleteBlobRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional string to send with the ping message.
	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{30}
}

func (x *PingRequest) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional string that is copied from PingRequest.
	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{31}
}

func (x *PingResponse) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// CompareAndSwapRequest is used by the CompareAndSwap methods to atomically update a property value.
type CompareAndSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record that the property belongs to.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// The name of the integer property to perform the operation to.
	PropertyName string `protobuf:"bytes,3,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	// value is the new property value to set.
	Value *Property `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// old_value is compared against the current property value.
	OldValue *Property `protobuf:"bytes,5,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,6,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *CompareAndSwapRequest) Reset() {
	*x = CompareAndSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareAndSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareAndSwapRequest) ProtoMessage() {}

func (x *CompareAndSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareAndSwapRequest.ProtoReflect.Descriptor instead.
func (*CompareAndSwapRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{32}
}

func (x *CompareAndSwapRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *CompareAndSwapRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *CompareAndSwapRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *CompareAndSwapRequest) GetValue() *Property {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CompareAndSwapRequest) GetOldValue() *Property {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *CompareAndSwapRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

// CompareAndSwapResponse is returned by CompareAndSwap and indicates whether the request
// has updated the property value.
type CompareAndSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated indicates that the condition is satisfied and the property has been updated.
	Updated bool `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
	// value is the old value of the property.
	Value *Property `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CompareAndSwapResponse) Reset() {
	*x = CompareAndSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareAndSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareAndSwapResponse) ProtoMessage() {}

func (x *CompareAndSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareAndSwapResponse.ProtoReflect.Descriptor instead.
func (*CompareAndSwapResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{33}
}

func (x *CompareAndSwapResponse) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *CompareAndSwapResponse) GetValue() *Property {
	if x != nil {
		return x.Value
	}
	return nil
}

// AtomicIntRequest is used by atomic arithmetic methods (CompareAndSwap{Greater,Less}Int,
// Atomic{Add,Sub}Int).
type AtomicIntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record that the property belongs to.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// The name of the integer property to perform the operation to.
	PropertyName string `protobuf:"bytes,3,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	// value is the operand for each method (see method descriptions).
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *AtomicIntRequest) Reset() {
	*x = AtomicIntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicIntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicIntRequest) ProtoMessage() {}

func (x *AtomicIntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicIntRequest.ProtoReflect.Descriptor instead.
func (*AtomicIntRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{34}
}

func (x *AtomicIntRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *AtomicIntRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *AtomicIntRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *AtomicIntRequest) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AtomicIntRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

// AtomicIntResponse indicates whether an atomic operation has updated a property
// and includes the old value of the property.
type AtomicIntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated indicates that the condition is satisfied and the property has been updated.
	Updated bool `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
	// value is the property value before the atomic operation.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AtomicIntResponse) Reset() {
	*x = AtomicIntResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicIntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicIntResponse) ProtoMessage() {}

func (x *AtomicIntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicIntResponse.ProtoReflect.Descriptor instead.
func (*AtomicIntResponse) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{35}
}

func (x *AtomicIntResponse) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *AtomicIntResponse) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// AtomicIncRequest is used by atomic increment/decrement methods.
type AtomicIncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the store that the record belongs to.
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The key of the record that the property belongs to.
	RecordKey string `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	// The name of the integer property to perform the operation to.
	PropertyName string `protobuf:"bytes,3,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	// lower_bound is the lower bound of the interval.
	LowerBound int64 `protobuf:"varint,4,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// upper_bound is the upper bound of the interval.
	UpperBound int64 `protobuf:"varint,5,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	// Performance hints.
	Hint *Hint `protobuf:"bytes,6,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *AtomicIncRequest) Reset() {
	*x = AtomicIncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_saves_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicIncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicIncRequest) ProtoMessage() {}

func (x *AtomicIncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_saves_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicIncRequest.ProtoReflect.Descriptor instead.
func (*AtomicIncRequest) Descriptor() ([]byte, []int) {
	return file_open_saves_proto_rawDescGZIP(), []int{36}
}

func (x *AtomicIncRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *AtomicIncRequest) GetRecordKey() string {
	if x != nil {
		return x.RecordKey
	}
	return ""
}

func (x *AtomicIncRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *AtomicIncRequest) GetLowerBound() int64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *AtomicIncRequest) GetUpperBound() int64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *AtomicIncRequest) GetHint() *Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

var File_open_saves_proto protoreflect.FileDescriptor

var file_open_saves_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x52, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a,
	0x04, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x4e,
	0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69,
	0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x22, 0xd2, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0x23, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x04,
	0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e,
	0x74, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x09,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x1e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01,
	0x22, 0x3d, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x02, 0x22,
	0x87, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x44,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x62,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x72, 0x63, 0x33, 0x32, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73,
	0x43, 0x72, 0x63, 0x33, 0x32, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x72, 0x63, 0x33, 0x32, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73,
	0x43, 0x72, 0x63, 0x33, 0x32, 0x63, 0x22, 0x60, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69,
	0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x19, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52,
	0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68,
	0x69, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x01, 0x0a,
	0x10, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x2a, 0x5b, 0x0a, 0x0e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x32, 0xfc, 0x0e, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x61, 0x76, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x57, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x12, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61,
	0x70, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x77, 0x61, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x76, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73,
	0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x09, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x63, 0x12, 0x1b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x49, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x41,
	0x74, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x63, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x76, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65,
	0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x73, 0x61, 0x76, 0x65, 0x73, 0x3b, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_open_saves_proto_rawDescOnce sync.Once
	file_open_saves_proto_rawDescData = file_open_saves_proto_rawDesc
)

func file_open_saves_proto_rawDescGZIP() []byte {
	file_open_saves_proto_rawDescOnce.Do(func() {
		file_open_saves_proto_rawDescData = protoimpl.X.CompressGZIP(file_open_saves_proto_rawDescData)
	})
	return file_open_saves_proto_rawDescData
}

var file_open_saves_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_open_saves_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_open_saves_proto_goTypes = []interface{}{
	(FilterOperator)(0),                // 0: opensaves.FilterOperator
	(Property_Type)(0),                 // 1: opensaves.Property.Type
	(SortOrder_Direction)(0),           // 2: opensaves.SortOrder.Direction
	(SortOrder_Property)(0),            // 3: opensaves.SortOrder.Property
	(*Property)(nil),                   // 4: opensaves.Property
	(*Record)(nil),                     // 5: opensaves.Record
	(*Hint)(nil),                       // 6: opensaves.Hint
	(*Store)(nil),                      // 7: opensaves.Store
	(*CreateStoreRequest)(nil),         // 8: opensaves.CreateStoreRequest
	(*GetStoreRequest)(nil),            // 9: opensaves.GetStoreRequest
	(*ListStoresRequest)(nil),          // 10: opensaves.ListStoresRequest
	(*ListStoresResponse)(nil),         // 11: opensaves.ListStoresResponse
	(*DeleteStoreRequest)(nil),         // 12: opensaves.DeleteStoreRequest
	(*CreateRecordRequest)(nil),        // 13: opensaves.CreateRecordRequest
	(*GetRecordRequest)(nil),           // 14: opensaves.GetRecordRequest
	(*QueryRecordsRequest)(nil),        // 15: opensaves.QueryRecordsRequest
	(*QueryFilter)(nil),                // 16: opensaves.QueryFilter
	(*SortOrder)(nil),                  // 17: opensaves.SortOrder
	(*QueryRecordsResponse)(nil),       // 18: opensaves.QueryRecordsResponse
	(*UpdateRecordRequest)(nil),        // 19: opensaves.UpdateRecordRequest
	(*DeleteRecordRequest)(nil),        // 20: opensaves.DeleteRecordRequest
	(*CreateBlobRequest)(nil),          // 21: opensaves.CreateBlobRequest
	(*BlobMetadata)(nil),               // 22: opensaves.BlobMetadata
	(*CreateChunkedBlobRequest)(nil),   // 23: opensaves.CreateChunkedBlobRequest
	(*CreateChunkedBlobResponse)(nil),  // 24: opensaves.CreateChunkedBlobResponse
	(*UploadChunkRequest)(nil),         // 25: opensaves.UploadChunkRequest
	(*ChunkMetadata)(nil),              // 26: opensaves.ChunkMetadata
	(*CommitChunkedUploadRequest)(nil), // 27: opensaves.CommitChunkedUploadRequest
	(*AbortChunkedUploadRequest)(nil),  // 28: opensaves.AbortChunkedUploadRequest
	(*GetBlobRequest)(nil),             // 29: opensaves.GetBlobRequest
	(*GetBlobResponse)(nil),            // 30: opensaves.GetBlobResponse
	(*GetBlobChunkRequest)(nil),        // 31: opensaves.GetBlobChunkRequest
	(*GetBlobChunkResponse)(nil),       // 32: opensaves.GetBlobChunkResponse
	(*DeleteBlobRequest)(nil),          // 33: opensaves.DeleteBlobRequest
	(*PingRequest)(nil),                // 34: opensaves.PingRequest
	(*PingResponse)(nil),               // 35: opensaves.PingResponse
	(*CompareAndSwapRequest)(nil),      // 36: opensaves.CompareAndSwapRequest
	(*CompareAndSwapResponse)(nil),     // 37: opensaves.CompareAndSwapResponse
	(*AtomicIntRequest)(nil),           // 38: opensaves.AtomicIntRequest
	(*AtomicIntResponse)(nil),          // 39: opensaves.AtomicIntResponse
	(*AtomicIncRequest)(nil),           // 40: opensaves.AtomicIncRequest
	nil,                                // 41: opensaves.Record.PropertiesEntry
	(*timestamppb.Timestamp)(nil),      // 42: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),              // 43: google.protobuf.Empty
}
var file_open_saves_proto_depIdxs = []int32{
	1,  // 0: opensaves.Property.type:type_name -> opensaves.Property.Type
	41, // 1: opensaves.Record.properties:type_name -> opensaves.Record.PropertiesEntry
	42, // 2: opensaves.Record.created_at:type_name -> google.protobuf.Timestamp
	42, // 3: opensaves.Record.updated_at:type_name -> google.protobuf.Timestamp
	42, // 4: opensaves.Store.created_at:type_name -> google.protobuf.Timestamp
	42, // 5: opensaves.Store.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 6: opensaves.CreateStoreRequest.store:type_name -> opensaves.Store
	7,  // 7: opensaves.ListStoresResponse.stores:type_name -> opensaves.Store
	5,  // 8: opensaves.CreateRecordRequest.record:type_name -> opensaves.Record
	6,  // 9: opensaves.CreateRecordRequest.hint:type_name -> opensaves.Hint
	6,  // 10: opensaves.GetRecordRequest.hint:type_name -> opensaves.Hint
	16, // 11: opensaves.QueryRecordsRequest.filters:type_name -> opensaves.QueryFilter
	17, // 12: opensaves.QueryRecordsRequest.sort_orders:type_name -> opensaves.SortOrder
	0,  // 13: opensaves.QueryFilter.operator:type_name -> opensaves.FilterOperator
	4,  // 14: opensaves.QueryFilter.value:type_name -> opensaves.Property
	2,  // 15: opensaves.SortOrder.direction:type_name -> opensaves.SortOrder.Direction
	3,  // 16: opensaves.SortOrder.property:type_name -> opensaves.SortOrder.Property
	5,  // 17: opensaves.QueryRecordsResponse.records:type_name -> opensaves.Record
	6,  // 18: opensaves.QueryRecordsResponse.hint:type_name -> opensaves.Hint
	5,  // 19: opensaves.UpdateRecordRequest.record:type_name -> opensaves.Record
	6,  // 20: opensaves.UpdateRecordRequest.hint:type_name -> opensaves.Hint
	22, // 21: opensaves.CreateBlobRequest.metadata:type_name -> opensaves.BlobMetadata
	6,  // 22: opensaves.BlobMetadata.hint:type_name -> opensaves.Hint
	26, // 23: opensaves.UploadChunkRequest.metadata:type_name -> opensaves.ChunkMetadata
	6,  // 24: opensaves.ChunkMetadata.hint:type_name -> opensaves.Hint
	6,  // 25: opensaves.CommitChunkedUploadRequest.hint:type_name -> opensaves.Hint
	6,  // 26: opensaves.GetBlobRequest.hint:type_name -> opensaves.Hint
	22, // 27: opensaves.GetBlobResponse.metadata:type_name -> opensaves.BlobMetadata
	6,  // 28: opensaves.GetBlobChunkRequest.hint:type_name -> opensaves.Hint
	26, // 29: opensaves.GetBlobChunkResponse.metadata:type_name -> opensaves.ChunkMetadata
	6,  // 30: opensaves.DeleteBlobRequest.hint:type_name -> opensaves.Hint
	4,  // 31: opensaves.CompareAndSwapRequest.value:type_name -> opensaves.Property
	4,  // 32: opensaves.CompareAndSwapRequest.old_value:type_name -> opensaves.Property
	6,  // 33: opensaves.CompareAndSwapRequest.hint:type_name -> opensaves.Hint
	4,  // 34: opensaves.CompareAndSwapResponse.value:type_name -> opensaves.Property
	6,  // 35: opensaves.AtomicIntRequest.hint:type_name -> opensaves.Hint
	6,  // 36: opensaves.AtomicIncRequest.hint:type_name -> opensaves.Hint
	4,  // 37: opensaves.Record.PropertiesEntry.value:type_name -> opensaves.Property
	8,  // 38: opensaves.OpenSaves.CreateStore:input_type -> opensaves.CreateStoreRequest
	9,  // 39: opensaves.OpenSaves.GetStore:input_type -> opensaves.GetStoreRequest
	10, // 40: opensaves.OpenSaves.ListStores:input_type -> opensaves.ListStoresRequest
	12, // 41: opensaves.OpenSaves.DeleteStore:input_type -> opensaves.DeleteStoreRequest
	13, // 42: opensaves.OpenSaves.CreateRecord:input_type -> opensaves.CreateRecordRequest
	14, // 43: opensaves.OpenSaves.GetRecord:input_type -> opensaves.GetRecordRequest
	15, // 44: opensaves.OpenSaves.QueryRecords:input_type -> opensaves.QueryRecordsRequest
	19, // 45: opensaves.OpenSaves.UpdateRecord:input_type -> opensaves.UpdateRecordRequest
	20, // 46: opensaves.OpenSaves.DeleteRecord:input_type -> opensaves.DeleteRecordRequest
	21, // 47: opensaves.OpenSaves.CreateBlob:input_type -> opensaves.CreateBlobRequest
	23, // 48: opensaves.OpenSaves.CreateChunkedBlob:input_type -> opensaves.CreateChunkedBlobRequest
	25, // 49: opensaves.OpenSaves.UploadChunk:input_type -> opensaves.UploadChunkRequest
	27, // 50: opensaves.OpenSaves.CommitChunkedUpload:input_type -> opensaves.CommitChunkedUploadRequest
	28, // 51: opensaves.OpenSaves.AbortChunkedUpload:input_type -> opensaves.AbortChunkedUploadRequest
	29, // 52: opensaves.OpenSaves.GetBlob:input_type -> opensaves.GetBlobRequest
	31, // 53: opensaves.OpenSaves.GetBlobChunk:input_type -> opensaves.GetBlobChunkRequest
	33, // 54: opensaves.OpenSaves.DeleteBlob:input_type -> opensaves.DeleteBlobRequest
	34, // 55: opensaves.OpenSaves.Ping:input_type -> opensaves.PingRequest
	36, // 56: opensaves.OpenSaves.CompareAndSwap:input_type -> opensaves.CompareAndSwapRequest
	38, // 57: opensaves.OpenSaves.CompareAndSwapGreaterInt:input_type -> opensaves.AtomicIntRequest
	38, // 58: opensaves.OpenSaves.CompareAndSwapLessInt:input_type -> opensaves.AtomicIntRequest
	38, // 59: opensaves.OpenSaves.AtomicAddInt:input_type -> opensaves.AtomicIntRequest
	38, // 60: opensaves.OpenSaves.AtomicSubInt:input_type -> opensaves.AtomicIntRequest
	40, // 61: opensaves.OpenSaves.AtomicInc:input_type -> opensaves.AtomicIncRequest
	40, // 62: opensaves.OpenSaves.AtomicDec:input_type -> opensaves.AtomicIncRequest
	7,  // 63: opensaves.OpenSaves.CreateStore:output_type -> opensaves.Store
	7,  // 64: opensaves.OpenSaves.GetStore:output_type -> opensaves.Store
	11, // 65: opensaves.OpenSaves.ListStores:output_type -> opensaves.ListStoresResponse
	43, // 66: opensaves.OpenSaves.DeleteStore:output_type -> google.protobuf.Empty
	5,  // 67: opensaves.OpenSaves.CreateRecord:output_type -> opensaves.Record
	5,  // 68: opensaves.OpenSaves.GetRecord:output_type -> opensaves.Record
	18, // 69: opensaves.OpenSaves.QueryRecords:output_type -> opensaves.QueryRecordsResponse
	5,  // 70: opensaves.OpenSaves.UpdateRecord:output_type -> opensaves.Record
	43, // 71: opensaves.OpenSaves.DeleteRecord:output_type -> google.protobuf.Empty
	22, // 72: opensaves.OpenSaves.CreateBlob:output_type -> opensaves.BlobMetadata
	24, // 73: opensaves.OpenSaves.CreateChunkedBlob:output_type -> opensaves.CreateChunkedBlobResponse
	26, // 74: opensaves.OpenSaves.UploadChunk:output_type -> opensaves.ChunkMetadata
	22, // 75: opensaves.OpenSaves.CommitChunkedUpload:output_type -> opensaves.BlobMetadata
	43, // 76: opensaves.OpenSaves.AbortChunkedUpload:output_type -> google.protobuf.Empty
	30, // 77: opensaves.OpenSaves.GetBlob:output_type -> opensaves.GetBlobResponse
	32, // 78: opensaves.OpenSaves.GetBlobChunk:output_type -> opensaves.GetBlobChunkResponse
	43, // 79: opensaves.OpenSaves.DeleteBlob:output_type -> google.protobuf.Empty
	35, // 80: opensaves.OpenSaves.Ping:output_type -> opensaves.PingResponse
	37, // 81: opensaves.OpenSaves.CompareAndSwap:output_type -> opensaves.CompareAndSwapResponse
	39, // 82: opensaves.OpenSaves.CompareAndSwapGreaterInt:output_type -> opensaves.AtomicIntResponse
	39, // 83: opensaves.OpenSaves.CompareAndSwapLessInt:output_type -> opensaves.AtomicIntResponse
	39, // 84: opensaves.OpenSaves.AtomicAddInt:output_type -> opensaves.AtomicIntResponse
	39, // 85: opensaves.OpenSaves.AtomicSubInt:output_type -> opensaves.AtomicIntResponse
	39, // 86: opensaves.OpenSaves.AtomicInc:output_type -> opensaves.AtomicIntResponse
	39, // 87: opensaves.OpenSaves.AtomicDec:output_type -> opensaves.AtomicIntResponse
	63, // [63:88] is the sub-list for method output_type
	38, // [38:63] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_open_saves_proto_init() }
func file_open_saves_proto_init() {
	if File_open_saves_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_open_saves_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChunkedBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChunkedBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitChunkedUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortChunkedUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlobChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlobChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareAndSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareAndSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicIntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicIntResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_saves_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicIncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_open_saves_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Property_IntegerValue)(nil),
		(*Property_StringValue)(nil),
		(*Property_BooleanValue)(nil),
	}
	file_open_saves_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CreateBlobRequest_Metadata)(nil),
		(*CreateBlobRequest_Content)(nil),
	}
	file_open_saves_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*UploadChunkRequest_Metadata)(nil),
		(*UploadChunkRequest_Content)(nil),
	}
	file_open_saves_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*GetBlobResponse_Metadata)(nil),
		(*GetBlobResponse_Content)(nil),
	}
	file_open_saves_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*GetBlobChunkResponse_Metadata)(nil),
		(*GetBlobChunkResponse_Content)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_open_saves_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_open_saves_proto_goTypes,
		DependencyIndexes: file_open_saves_proto_depIdxs,
		EnumInfos:         file_open_saves_proto_enumTypes,
		MessageInfos:      file_open_saves_proto_msgTypes,
	}.Build()
	File_open_saves_proto = out.File
	file_open_saves_proto_rawDesc = nil
	file_open_saves_proto_goTypes = nil
	file_open_saves_proto_depIdxs = nil
}
