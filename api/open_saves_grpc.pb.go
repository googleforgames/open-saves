// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/open_saves.proto

package opensaves

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenSavesClient is the client API for OpenSaves service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenSavesClient interface {
	// CreateStore creates and returns a new store.
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*Store, error)
	// GetStore fetches store with the specified key.
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*Store, error)
	// ListStore returns stores matching the provided criteria.
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// DeleteStore deletes a single store with the specified key.
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateRecord creates a new record. This returns an error if the
	// specified key already exists.
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// GetRecord returns a record with the specified key.
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// QueryRecords performs a query and returns matching records.
	QueryRecords(ctx context.Context, in *QueryRecordsRequest, opts ...grpc.CallOption) (*QueryRecordsResponse, error)
	// UpdateRecord updates an existing record. This returns an error and
	// does not create a new record if the key doesn't exist.
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// DeleteRecord deletes a single record with the specified key.
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateBlob adds a new blob to a record.
	CreateBlob(ctx context.Context, opts ...grpc.CallOption) (OpenSaves_CreateBlobClient, error)
	// CreateChunkedBlob starts a new chunked blob upload session.
	CreateChunkedBlob(ctx context.Context, in *CreateChunkedBlobRequest, opts ...grpc.CallOption) (*CreateChunkedBlobResponse, error)
	// UploadChunk uploads and stores each each chunk.
	UploadChunk(ctx context.Context, opts ...grpc.CallOption) (OpenSaves_UploadChunkClient, error)
	// CommitChunkedUpload commits a chunked blob upload session and
	// makes the blob available for reads.
	CommitChunkedUpload(ctx context.Context, in *CommitChunkedUploadRequest, opts ...grpc.CallOption) (*BlobMetadata, error)
	// AbortChunkedUploads aborts a chunked blob upload session and
	// discards temporary objects.
	AbortChunkedUpload(ctx context.Context, in *AbortChunkedUploadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBlob retrieves a blob object in a record.
	// Currently this method does not support chunked blobs and
	// returns an UNIMPLEMENTED error if called for chunked blobs.
	// TODO(yuryu): Support chunked blobs and return such objects entirely.
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (OpenSaves_GetBlobClient, error)
	// GetBlobChunk returns a chunk of a blob object uploaded using
	// CreateChunkedBlob. It returns an INVALID_ARGUMENT error if the blob is not
	// a chunked object.
	GetBlobChunk(ctx context.Context, in *GetBlobChunkRequest, opts ...grpc.CallOption) (OpenSaves_GetBlobChunkClient, error)
	// DeleteBlob removes an blob object from a record.
	DeleteBlob(ctx context.Context, in *DeleteBlobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Ping returns the same string provided by the client.
	// The string is optional and the server returns an empty string if
	// omitted.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// CompareAndSwap compares the property to old_value and updates the property to value
	// if the old_value and the current property are equal.
	// The updated field in CompareAndSwapResponse is set to true if the swap is executed.
	// For example, CompareAndSwap(property, value = 42, old_value = 24) will set the
	// property to 42 if the current value is 24.
	// CompareAndSwap also supports swapping with a value of another type, e.g.
	// CompareAndSwap(property, value = "42", old_value = 24).
	// Otherwise it will not update the property and return the current (unchanged) value
	// and updated = false. The operation is executed atomically.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	CompareAndSwap(ctx context.Context, in *CompareAndSwapRequest, opts ...grpc.CallOption) (*CompareAndSwapResponse, error)
	// CompareAndSwapGreaterInt compares the number of an integer property to value and
	// updates the property if the new value is greater than the current value.
	// The updated field in AtomicResponse is set to true if the swap is executed.
	// For example, CompareAndSwapGreaterInt(property, value = 42) will replace property with 42
	// and return {value = old value, updated = true} if 42 > property.
	// Otherwise it will not update the property and return the current (unchanged) value
	// and updated = false. The operation is executed atomically.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	CompareAndSwapGreaterInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error)
	// CompareAndSwapLessInt does the same operation as CompareAndSwapGreaterInt except
	// the condition is the new value is less than the old value.
	CompareAndSwapLessInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error)
	// AtomicAddInt adds a number to an integer property atomically.
	// For example, AtomicAdd(property, 42) will run property += 42 and return the old value.
	// The updated field in AtomicIntResponse is always set to true.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	AtomicAddInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error)
	// AtomicSubInt does the same except it subtracts a number.
	AtomicSubInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error)
	// AtomicInc increments the number of an integer property if less than upper_bound.
	// Otherwise it resets the property to lower_bound.
	// if (property < upper_bound) {
	//   property++
	// } else {
	//   property = lower_bound
	// }
	// This makes the property an incrementing counter between [lower_bound, upper_bound].
	// It returns the old value of the property.
	// The updated field in AtomicIntResponse is set to true.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	AtomicInc(ctx context.Context, in *AtomicIncRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error)
	// AtomicDec decrements the number of an integer property by one if more than lower_bound.
	// Otherwise it resets the property to upper_bound.
	// if (lower_bound < property) {
	//   property--
	// } else {
	//   property = upper_bound
	// }
	// This makes the property a decrementing counter between [lower_bound, upper_bound].
	// It returns the old value of the property.
	// The updated field in AtomicIntResponse is always set to true.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	AtomicDec(ctx context.Context, in *AtomicIncRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error)
}

type openSavesClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenSavesClient(cc grpc.ClientConnInterface) OpenSavesClient {
	return &openSavesClient{cc}
}

func (c *openSavesClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CreateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/ListStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/DeleteStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) QueryRecords(ctx context.Context, in *QueryRecordsRequest, opts ...grpc.CallOption) (*QueryRecordsResponse, error) {
	out := new(QueryRecordsResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/QueryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) CreateBlob(ctx context.Context, opts ...grpc.CallOption) (OpenSaves_CreateBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenSaves_ServiceDesc.Streams[0], "/opensaves.OpenSaves/CreateBlob", opts...)
	if err != nil {
		return nil, err
	}
	x := &openSavesCreateBlobClient{stream}
	return x, nil
}

type OpenSaves_CreateBlobClient interface {
	Send(*CreateBlobRequest) error
	CloseAndRecv() (*BlobMetadata, error)
	grpc.ClientStream
}

type openSavesCreateBlobClient struct {
	grpc.ClientStream
}

func (x *openSavesCreateBlobClient) Send(m *CreateBlobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openSavesCreateBlobClient) CloseAndRecv() (*BlobMetadata, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BlobMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openSavesClient) CreateChunkedBlob(ctx context.Context, in *CreateChunkedBlobRequest, opts ...grpc.CallOption) (*CreateChunkedBlobResponse, error) {
	out := new(CreateChunkedBlobResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CreateChunkedBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) UploadChunk(ctx context.Context, opts ...grpc.CallOption) (OpenSaves_UploadChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenSaves_ServiceDesc.Streams[1], "/opensaves.OpenSaves/UploadChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &openSavesUploadChunkClient{stream}
	return x, nil
}

type OpenSaves_UploadChunkClient interface {
	Send(*UploadChunkRequest) error
	CloseAndRecv() (*ChunkMetadata, error)
	grpc.ClientStream
}

type openSavesUploadChunkClient struct {
	grpc.ClientStream
}

func (x *openSavesUploadChunkClient) Send(m *UploadChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openSavesUploadChunkClient) CloseAndRecv() (*ChunkMetadata, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ChunkMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openSavesClient) CommitChunkedUpload(ctx context.Context, in *CommitChunkedUploadRequest, opts ...grpc.CallOption) (*BlobMetadata, error) {
	out := new(BlobMetadata)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CommitChunkedUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) AbortChunkedUpload(ctx context.Context, in *AbortChunkedUploadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/AbortChunkedUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (OpenSaves_GetBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenSaves_ServiceDesc.Streams[2], "/opensaves.OpenSaves/GetBlob", opts...)
	if err != nil {
		return nil, err
	}
	x := &openSavesGetBlobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenSaves_GetBlobClient interface {
	Recv() (*GetBlobResponse, error)
	grpc.ClientStream
}

type openSavesGetBlobClient struct {
	grpc.ClientStream
}

func (x *openSavesGetBlobClient) Recv() (*GetBlobResponse, error) {
	m := new(GetBlobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openSavesClient) GetBlobChunk(ctx context.Context, in *GetBlobChunkRequest, opts ...grpc.CallOption) (OpenSaves_GetBlobChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenSaves_ServiceDesc.Streams[3], "/opensaves.OpenSaves/GetBlobChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &openSavesGetBlobChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenSaves_GetBlobChunkClient interface {
	Recv() (*GetBlobChunkResponse, error)
	grpc.ClientStream
}

type openSavesGetBlobChunkClient struct {
	grpc.ClientStream
}

func (x *openSavesGetBlobChunkClient) Recv() (*GetBlobChunkResponse, error) {
	m := new(GetBlobChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openSavesClient) DeleteBlob(ctx context.Context, in *DeleteBlobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/DeleteBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) CompareAndSwap(ctx context.Context, in *CompareAndSwapRequest, opts ...grpc.CallOption) (*CompareAndSwapResponse, error) {
	out := new(CompareAndSwapResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CompareAndSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) CompareAndSwapGreaterInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error) {
	out := new(AtomicIntResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CompareAndSwapGreaterInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) CompareAndSwapLessInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error) {
	out := new(AtomicIntResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/CompareAndSwapLessInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) AtomicAddInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error) {
	out := new(AtomicIntResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/AtomicAddInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) AtomicSubInt(ctx context.Context, in *AtomicIntRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error) {
	out := new(AtomicIntResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/AtomicSubInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) AtomicInc(ctx context.Context, in *AtomicIncRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error) {
	out := new(AtomicIntResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/AtomicInc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSavesClient) AtomicDec(ctx context.Context, in *AtomicIncRequest, opts ...grpc.CallOption) (*AtomicIntResponse, error) {
	out := new(AtomicIntResponse)
	err := c.cc.Invoke(ctx, "/opensaves.OpenSaves/AtomicDec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenSavesServer is the server API for OpenSaves service.
// All implementations must embed UnimplementedOpenSavesServer
// for forward compatibility
type OpenSavesServer interface {
	// CreateStore creates and returns a new store.
	CreateStore(context.Context, *CreateStoreRequest) (*Store, error)
	// GetStore fetches store with the specified key.
	GetStore(context.Context, *GetStoreRequest) (*Store, error)
	// ListStore returns stores matching the provided criteria.
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// DeleteStore deletes a single store with the specified key.
	DeleteStore(context.Context, *DeleteStoreRequest) (*empty.Empty, error)
	// CreateRecord creates a new record. This returns an error if the
	// specified key already exists.
	CreateRecord(context.Context, *CreateRecordRequest) (*Record, error)
	// GetRecord returns a record with the specified key.
	GetRecord(context.Context, *GetRecordRequest) (*Record, error)
	// QueryRecords performs a query and returns matching records.
	QueryRecords(context.Context, *QueryRecordsRequest) (*QueryRecordsResponse, error)
	// UpdateRecord updates an existing record. This returns an error and
	// does not create a new record if the key doesn't exist.
	UpdateRecord(context.Context, *UpdateRecordRequest) (*Record, error)
	// DeleteRecord deletes a single record with the specified key.
	DeleteRecord(context.Context, *DeleteRecordRequest) (*empty.Empty, error)
	// CreateBlob adds a new blob to a record.
	CreateBlob(OpenSaves_CreateBlobServer) error
	// CreateChunkedBlob starts a new chunked blob upload session.
	CreateChunkedBlob(context.Context, *CreateChunkedBlobRequest) (*CreateChunkedBlobResponse, error)
	// UploadChunk uploads and stores each each chunk.
	UploadChunk(OpenSaves_UploadChunkServer) error
	// CommitChunkedUpload commits a chunked blob upload session and
	// makes the blob available for reads.
	CommitChunkedUpload(context.Context, *CommitChunkedUploadRequest) (*BlobMetadata, error)
	// AbortChunkedUploads aborts a chunked blob upload session and
	// discards temporary objects.
	AbortChunkedUpload(context.Context, *AbortChunkedUploadRequest) (*empty.Empty, error)
	// GetBlob retrieves a blob object in a record.
	// Currently this method does not support chunked blobs and
	// returns an UNIMPLEMENTED error if called for chunked blobs.
	// TODO(yuryu): Support chunked blobs and return such objects entirely.
	GetBlob(*GetBlobRequest, OpenSaves_GetBlobServer) error
	// GetBlobChunk returns a chunk of a blob object uploaded using
	// CreateChunkedBlob. It returns an INVALID_ARGUMENT error if the blob is not
	// a chunked object.
	GetBlobChunk(*GetBlobChunkRequest, OpenSaves_GetBlobChunkServer) error
	// DeleteBlob removes an blob object from a record.
	DeleteBlob(context.Context, *DeleteBlobRequest) (*empty.Empty, error)
	// Ping returns the same string provided by the client.
	// The string is optional and the server returns an empty string if
	// omitted.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// CompareAndSwap compares the property to old_value and updates the property to value
	// if the old_value and the current property are equal.
	// The updated field in CompareAndSwapResponse is set to true if the swap is executed.
	// For example, CompareAndSwap(property, value = 42, old_value = 24) will set the
	// property to 42 if the current value is 24.
	// CompareAndSwap also supports swapping with a value of another type, e.g.
	// CompareAndSwap(property, value = "42", old_value = 24).
	// Otherwise it will not update the property and return the current (unchanged) value
	// and updated = false. The operation is executed atomically.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	CompareAndSwap(context.Context, *CompareAndSwapRequest) (*CompareAndSwapResponse, error)
	// CompareAndSwapGreaterInt compares the number of an integer property to value and
	// updates the property if the new value is greater than the current value.
	// The updated field in AtomicResponse is set to true if the swap is executed.
	// For example, CompareAndSwapGreaterInt(property, value = 42) will replace property with 42
	// and return {value = old value, updated = true} if 42 > property.
	// Otherwise it will not update the property and return the current (unchanged) value
	// and updated = false. The operation is executed atomically.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	CompareAndSwapGreaterInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error)
	// CompareAndSwapLessInt does the same operation as CompareAndSwapGreaterInt except
	// the condition is the new value is less than the old value.
	CompareAndSwapLessInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error)
	// AtomicAddInt adds a number to an integer property atomically.
	// For example, AtomicAdd(property, 42) will run property += 42 and return the old value.
	// The updated field in AtomicIntResponse is always set to true.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	AtomicAddInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error)
	// AtomicSubInt does the same except it subtracts a number.
	AtomicSubInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error)
	// AtomicInc increments the number of an integer property if less than upper_bound.
	// Otherwise it resets the property to lower_bound.
	// if (property < upper_bound) {
	//   property++
	// } else {
	//   property = lower_bound
	// }
	// This makes the property an incrementing counter between [lower_bound, upper_bound].
	// It returns the old value of the property.
	// The updated field in AtomicIntResponse is set to true.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	AtomicInc(context.Context, *AtomicIncRequest) (*AtomicIntResponse, error)
	// AtomicDec decrements the number of an integer property by one if more than lower_bound.
	// Otherwise it resets the property to upper_bound.
	// if (lower_bound < property) {
	//   property--
	// } else {
	//   property = upper_bound
	// }
	// This makes the property a decrementing counter between [lower_bound, upper_bound].
	// It returns the old value of the property.
	// The updated field in AtomicIntResponse is always set to true.
	// Errors:
	//   - NotFound: the requested record or property was not found.
	//   - InvalidArgument: the requested property was not an integer.
	AtomicDec(context.Context, *AtomicIncRequest) (*AtomicIntResponse, error)
	mustEmbedUnimplementedOpenSavesServer()
}

// UnimplementedOpenSavesServer must be embedded to have forward compatible implementations.
type UnimplementedOpenSavesServer struct {
}

func (UnimplementedOpenSavesServer) CreateStore(context.Context, *CreateStoreRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedOpenSavesServer) GetStore(context.Context, *GetStoreRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedOpenSavesServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedOpenSavesServer) DeleteStore(context.Context, *DeleteStoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedOpenSavesServer) CreateRecord(context.Context, *CreateRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedOpenSavesServer) GetRecord(context.Context, *GetRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedOpenSavesServer) QueryRecords(context.Context, *QueryRecordsRequest) (*QueryRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecords not implemented")
}
func (UnimplementedOpenSavesServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedOpenSavesServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedOpenSavesServer) CreateBlob(OpenSaves_CreateBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBlob not implemented")
}
func (UnimplementedOpenSavesServer) CreateChunkedBlob(context.Context, *CreateChunkedBlobRequest) (*CreateChunkedBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunkedBlob not implemented")
}
func (UnimplementedOpenSavesServer) UploadChunk(OpenSaves_UploadChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedOpenSavesServer) CommitChunkedUpload(context.Context, *CommitChunkedUploadRequest) (*BlobMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitChunkedUpload not implemented")
}
func (UnimplementedOpenSavesServer) AbortChunkedUpload(context.Context, *AbortChunkedUploadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortChunkedUpload not implemented")
}
func (UnimplementedOpenSavesServer) GetBlob(*GetBlobRequest, OpenSaves_GetBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedOpenSavesServer) GetBlobChunk(*GetBlobChunkRequest, OpenSaves_GetBlobChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlobChunk not implemented")
}
func (UnimplementedOpenSavesServer) DeleteBlob(context.Context, *DeleteBlobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlob not implemented")
}
func (UnimplementedOpenSavesServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedOpenSavesServer) CompareAndSwap(context.Context, *CompareAndSwapRequest) (*CompareAndSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareAndSwap not implemented")
}
func (UnimplementedOpenSavesServer) CompareAndSwapGreaterInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareAndSwapGreaterInt not implemented")
}
func (UnimplementedOpenSavesServer) CompareAndSwapLessInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareAndSwapLessInt not implemented")
}
func (UnimplementedOpenSavesServer) AtomicAddInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicAddInt not implemented")
}
func (UnimplementedOpenSavesServer) AtomicSubInt(context.Context, *AtomicIntRequest) (*AtomicIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicSubInt not implemented")
}
func (UnimplementedOpenSavesServer) AtomicInc(context.Context, *AtomicIncRequest) (*AtomicIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicInc not implemented")
}
func (UnimplementedOpenSavesServer) AtomicDec(context.Context, *AtomicIncRequest) (*AtomicIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicDec not implemented")
}
func (UnimplementedOpenSavesServer) mustEmbedUnimplementedOpenSavesServer() {}

// UnsafeOpenSavesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenSavesServer will
// result in compilation errors.
type UnsafeOpenSavesServer interface {
	mustEmbedUnimplementedOpenSavesServer()
}

func RegisterOpenSavesServer(s grpc.ServiceRegistrar, srv OpenSavesServer) {
	s.RegisterService(&OpenSaves_ServiceDesc, srv)
}

func _OpenSaves_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CreateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/ListStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/DeleteStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_QueryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).QueryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/QueryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).QueryRecords(ctx, req.(*QueryRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_CreateBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenSavesServer).CreateBlob(&openSavesCreateBlobServer{stream})
}

type OpenSaves_CreateBlobServer interface {
	SendAndClose(*BlobMetadata) error
	Recv() (*CreateBlobRequest, error)
	grpc.ServerStream
}

type openSavesCreateBlobServer struct {
	grpc.ServerStream
}

func (x *openSavesCreateBlobServer) SendAndClose(m *BlobMetadata) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openSavesCreateBlobServer) Recv() (*CreateBlobRequest, error) {
	m := new(CreateBlobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OpenSaves_CreateChunkedBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkedBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CreateChunkedBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CreateChunkedBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CreateChunkedBlob(ctx, req.(*CreateChunkedBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_UploadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenSavesServer).UploadChunk(&openSavesUploadChunkServer{stream})
}

type OpenSaves_UploadChunkServer interface {
	SendAndClose(*ChunkMetadata) error
	Recv() (*UploadChunkRequest, error)
	grpc.ServerStream
}

type openSavesUploadChunkServer struct {
	grpc.ServerStream
}

func (x *openSavesUploadChunkServer) SendAndClose(m *ChunkMetadata) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openSavesUploadChunkServer) Recv() (*UploadChunkRequest, error) {
	m := new(UploadChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OpenSaves_CommitChunkedUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitChunkedUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CommitChunkedUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CommitChunkedUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CommitChunkedUpload(ctx, req.(*CommitChunkedUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_AbortChunkedUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortChunkedUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).AbortChunkedUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/AbortChunkedUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).AbortChunkedUpload(ctx, req.(*AbortChunkedUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_GetBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenSavesServer).GetBlob(m, &openSavesGetBlobServer{stream})
}

type OpenSaves_GetBlobServer interface {
	Send(*GetBlobResponse) error
	grpc.ServerStream
}

type openSavesGetBlobServer struct {
	grpc.ServerStream
}

func (x *openSavesGetBlobServer) Send(m *GetBlobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OpenSaves_GetBlobChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlobChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenSavesServer).GetBlobChunk(m, &openSavesGetBlobChunkServer{stream})
}

type OpenSaves_GetBlobChunkServer interface {
	Send(*GetBlobChunkResponse) error
	grpc.ServerStream
}

type openSavesGetBlobChunkServer struct {
	grpc.ServerStream
}

func (x *openSavesGetBlobChunkServer) Send(m *GetBlobChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OpenSaves_DeleteBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).DeleteBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/DeleteBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).DeleteBlob(ctx, req.(*DeleteBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_CompareAndSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareAndSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CompareAndSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CompareAndSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CompareAndSwap(ctx, req.(*CompareAndSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_CompareAndSwapGreaterInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CompareAndSwapGreaterInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CompareAndSwapGreaterInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CompareAndSwapGreaterInt(ctx, req.(*AtomicIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_CompareAndSwapLessInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).CompareAndSwapLessInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/CompareAndSwapLessInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).CompareAndSwapLessInt(ctx, req.(*AtomicIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_AtomicAddInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).AtomicAddInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/AtomicAddInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).AtomicAddInt(ctx, req.(*AtomicIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_AtomicSubInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).AtomicSubInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/AtomicSubInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).AtomicSubInt(ctx, req.(*AtomicIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_AtomicInc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicIncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).AtomicInc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/AtomicInc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).AtomicInc(ctx, req.(*AtomicIncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSaves_AtomicDec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicIncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSavesServer).AtomicDec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensaves.OpenSaves/AtomicDec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSavesServer).AtomicDec(ctx, req.(*AtomicIncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenSaves_ServiceDesc is the grpc.ServiceDesc for OpenSaves service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenSaves_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opensaves.OpenSaves",
	HandlerType: (*OpenSavesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _OpenSaves_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _OpenSaves_GetStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _OpenSaves_ListStores_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _OpenSaves_DeleteStore_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _OpenSaves_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _OpenSaves_GetRecord_Handler,
		},
		{
			MethodName: "QueryRecords",
			Handler:    _OpenSaves_QueryRecords_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _OpenSaves_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _OpenSaves_DeleteRecord_Handler,
		},
		{
			MethodName: "CreateChunkedBlob",
			Handler:    _OpenSaves_CreateChunkedBlob_Handler,
		},
		{
			MethodName: "CommitChunkedUpload",
			Handler:    _OpenSaves_CommitChunkedUpload_Handler,
		},
		{
			MethodName: "AbortChunkedUpload",
			Handler:    _OpenSaves_AbortChunkedUpload_Handler,
		},
		{
			MethodName: "DeleteBlob",
			Handler:    _OpenSaves_DeleteBlob_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _OpenSaves_Ping_Handler,
		},
		{
			MethodName: "CompareAndSwap",
			Handler:    _OpenSaves_CompareAndSwap_Handler,
		},
		{
			MethodName: "CompareAndSwapGreaterInt",
			Handler:    _OpenSaves_CompareAndSwapGreaterInt_Handler,
		},
		{
			MethodName: "CompareAndSwapLessInt",
			Handler:    _OpenSaves_CompareAndSwapLessInt_Handler,
		},
		{
			MethodName: "AtomicAddInt",
			Handler:    _OpenSaves_AtomicAddInt_Handler,
		},
		{
			MethodName: "AtomicSubInt",
			Handler:    _OpenSaves_AtomicSubInt_Handler,
		},
		{
			MethodName: "AtomicInc",
			Handler:    _OpenSaves_AtomicInc_Handler,
		},
		{
			MethodName: "AtomicDec",
			Handler:    _OpenSaves_AtomicDec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateBlob",
			Handler:       _OpenSaves_CreateBlob_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadChunk",
			Handler:       _OpenSaves_UploadChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlob",
			Handler:       _OpenSaves_GetBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlobChunk",
			Handler:       _OpenSaves_GetBlobChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/open_saves.proto",
}
