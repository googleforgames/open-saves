// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package triton;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/googleforgames/triton";

service Triton {
  rpc CreateStore(CreateStoreRequest) returns (Store) {
    option (google.api.http) = {
      post: "/v1/stores"
      body: "*"
    };
  }

  rpc GetStore(GetStoreRequest) returns (Store) {
    option (google.api.http) = {
      get: "/v1/stores/{id}"
    };
  }

  rpc ListStore(ListStoresRequest) returns (ListStoresResponse) {
    option (google.api.http) = {
      get: "/v1/stores"
    };
  }

  rpc DeleteStore(DeleteStoreRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/stores/{id}"
    };
  }

  rpc CreateRecord(CreateRecordRequest) returns (Record) {
    option (google.api.http) = {
      post: "/v1/stores/{store_id}/records"
      body: "*"
    };
  }

  rpc GetRecord(GetRecordRequest) returns (Record) {
    option (google.api.http) = {
      get: "/v1/stores/{store_id}/records/{key}"
    };
  }

  rpc UpdateRecord(UpdateRecordRequest) returns (Record) {
    option (google.api.http) = {
      patch: "/v1/stores/{store_id}/records/{key}",
      body: "*"
    };
  }

  rpc DeleteRecord(DeleteRecordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/stores/{store_id}/records/{key}"
    };
  }
}

message StructuredData {
  oneof value {
    int64 integer_value = 1;
    string string_value = 2;
    bool boolean_value = 3;
  }
}

message Record {
  string key = 1;
  bytes blob = 2;       // opaque to the server
  int32 blob_size = 3;  // defined by the server
  map<string, StructuredData> stuctured_data = 4;
}

enum Hint {
  // Unspecified. This value must not be used.
  HINT_UNSPECIFIED = 0;
  DO_NOT_CACHE = 1;
  IGNORE_CACHE = 2;
  ALWAYS_USE_BULK_STORE = 3;
  DO_NOT_USE_BULK_STORE = 4;
}

// Resources for handling generic stores
message StoreOptions {}

message Store {
  // ID of this store, assigned by the server when the store is created.
  int64 id = 1;
  string name = 2;
  StoreOptions options = 3;
}

message CreateStoreRequest {
  StoreOptions options = 1;
  string name = 2;
}

message GetStoreRequest {
  int64 id = 1;
}

message ListStoresRequest {}

message QueryStoreRequest {
  int64 store_id = 1;
  string property = 2;
  oneof condition {
    int64 integer_value = 3;
    bool boolean_value = 4;
    string string_value = 5;
  }
}

message DeleteStoreRequest {
  int64 id = 1;
}

message CreateRecordRequest {
  int64 store_id = 1;
  Record record = 2;
  Hint hint = 3;
}

message GetRecordRequest {
  int64 store_id = 1;
  string key = 2;
}

message UpdateRecordRequest {
  int64 store_id = 1;
  string key = 2;
  Record record = 3;
  Hint hint = 4;
}

message DeleteRecordRequest {
  int64 store_id = 1;
  string key = 2;
}

message ListStoresResponse {
  repeated Store stores = 1;
}
